/*
1. You are given a number n, representing the count of coins.
2. You are given n numbers, representing the denominations of n coins.
3. You are given a number "amt".
4. You are required to calculate and print the combinations of the n coins (non-duplicate) using 
     which the amount "amt" can be paid.

Note -> Use the code snippet and follow the algorithm discussed in question video. The judge can't 
               force you but the intention is to teach a concept. Play in spirit of the question.
*/

import java.io.*;

public class coin_change1 {

  public static void coinChange(int i, int[] coins, int amtsf, int tamt, String asf) {
    // Base condition in which we check that i value reached to the maximum value of coins total length
if(i==coins.length)
{
    //If the amount so far reacted to the total amount
    // then print

    if(amtsf==tamt)
    {
        System.out.println(asf);
    }
    return;
}
//Recursive calll for considering the coin value
coinChange(i+1, coins, amtsf+coins[i], tamt, asf+coins[i]+"-");
//Another recursive call without considering any coin value
coinChange(i+1, coins, amtsf, tamt, asf);

  }
  public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    int n = Integer.parseInt(br.readLine());
    int[] coins = new int[n];
    for (int i = 0; i < n; i++) {
      coins[i] = Integer.parseInt(br.readLine());
    }
    int amt = Integer.parseInt(br.readLine());

    coinChange(0, coins, 0, amt, "");
  }
}
